name: CICD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: "*"
  workflow_dispatch:
    branches: '*'

jobs:
  build_and_test:
    name: CICD tests
    runs-on: ubuntu-latest
    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USER }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      CA_SUB: ${{ vars.CA_SUB }}
      IMAGE_REPO: ${{ vars.IMAGE_REPO }}
    steps:
      - name: Set up Go 1.x
        uses: actions/setup-go@v3
        with:
          go-version: ^1.19

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Get dependencies
        run: |
          go mod tidy
          go install github.com/t-yuki/gocover-cobertura@latest
          go install github.com/wadey/gocovmerge@latest
          mkdir -p out

      - name: Unit / L1 Test
        run: |
          #top level out needed for mounting
          mkdir -p out
          go install github.com/jstemmer/go-junit-report@latest
          #lower level out.  we want both
          mkdir -p out
          export NATS_URL=nats://localhost:30220
          go test -v -coverpkg=github.com/theotw/k8srelay/pkg/... -coverprofile=out/unit_coverage.out github.com/theotw/k8srelay/pkg/... > out/l1_out.txt 2>&1
          cat out/l1_out.txt | go-junit-report > out/l1_report.xml 
          cat out/l1_out.txt
          ls -l out/
          cat out/l1_report.xml
          pwd        

      - name: Build Test image
        run: |
          export IMAGE_TAG=dev
          make relaytest
          echo "Logging into $IMAGE_REPO with $DOCKER_USERNAME"
          docker login $IMAGE_REPO -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
          docker push theotw/k8srelaytest:dev

      - name: Create kind cluster
        uses: helm/kind-action@v1.4.0
        with:
          config: testfiles/kind-config.yaml
      - name: Validate Kind Cluster
        run: |
          echo "let kind get up and running"
          sleep 120
          echo "kubectl get nodes -o wide" 
          kubectl get nodes -o wide
          echo "kubectl get storageclasses"
          kubectl get storageclasses
          echo "kubectl  get serviceaccount"
          kubectl  get serviceaccount

      - name: Deploy Server
        run: |
          kubectl create ns test
          kubectl -n test apply -f testfiles/sa.yaml
          kubectl -n test apply -f testfiles/relay-config.yaml
          kubectl -n test apply -f testfiles/nats.yaml
          kubectl -n test apply -f testfiles/relayserver.yaml
          kubectl -n test apply -f testfiles/relaylet.yaml
          sleep 60
          kubectl -n test get all
          kubectl -n test port-forward service/nats 4222:4222 &
          kubectl -n test port-forward service/relayserver 8443:8443 &
          kubectl -n test port-forward service/relayserver 8080:8080 &
          kubectl -n test port-forward service/relayserver 8080:8080 &
          kubectl -n test port-forward service/relaylet 8082:8082 &

      - name: Wait for relay server
        uses: iFaxity/wait-on-action@v1
        with:
          resource: http://localhost:8080/ready
          timeout: 300000
          verbose: true
          interval: 5000

      - name: Wait for relaylet
        uses: iFaxity/wait-on-action@v1
        with:
          resource: http://localhost:8082/ready
          timeout: 300000
          verbose: true
          interval: 5000

      - name: Run L2 Tests
        run: |
          cd connector
          mkdir -p out
          export NATS_SERVER_URL=nats://localhost:4222
          # go test -v -coverpkg=github.com/netapp-polaris/astra-connector/connector/pkg/... -coverprofile=out/l2_client_coverage.out github.com/netapp-polaris/astra-connector/connector/tests/client/... > out/l2_client_out.txt 2>&1  
          echo "Done with L2 Tests, sending kill to server"
          curl http://localhost:8080/kill | exit 0
          curl http://localhost:8082/kill | exit 0
          echo " Waiting 10 for server to finish curl ret=" $?
          sleep 10
          echo "converting l2 client out"
          #cat out/l2_client_out.txt | go-junit-report > out/l2_client_report.xml
          echo "Done"          

      - name: Get current date
        id: date
        run: |
          export BASEVERSION=$(cat version.txt)
          export BUILD_VERSION=$BASEVERSION.$(date +'%Y%m%d%H%M')
          echo $BUILD_VERSION > out/BUILD_VERSION.txt
          cd ..

      - name: Build image
        if: github.ref == 'refs/heads/mainX'
        run: |
          export BUILD_VERSION=$(cat out/BUILD_VERSION.txt)
          export IMAGE_TAG=$BUILD_VERSION
          echo $BUILD_VERSION
          make allimages

      - name: Tag and push image
        if: github.ref == 'refs/heads/mainX'
        run: |
          echo "Push commented out"
          export BUILD_VERSION=$(cat out/BUILD_VERSION.txt)
          export IMAGE_TAG=$BUILD_VERSION
          echo $BUILD_VERSION 
          echo $IMAGE_REPO 
          docker login $IMAGE_REPO -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
          make tag
          make push


      - name: Upload test artifacts
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: cicd-test-results
          path: |
            out/*
          retention-days: 5